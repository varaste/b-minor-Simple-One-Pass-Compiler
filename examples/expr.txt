addition_test:      integer = 1 + 7;

subtraction_test:    integer = 7 - 1;

multiplication_test:  integer = 7 * 1;

division_test:   integer = 100 / 0;

exponent_test: integer = 2 ^ 31;

negation_test:     integer = -42;

arithmetic_expression_test:    integer = 100 * (10 - (8 + 2) / (167-1));

// FIXME: fix init lists
//test_empty_init_list: array [] integer = {};
//test_one_init_list: array [] integer = {1};
//test_init_list: array [] integer = {1, 2, 3, 4, 5, 6};

modulo_test: integer = 100 % 10;

test_fn_0: function integer () = { return 1; }
test_fn_1: function integer (x: integer) = { return 1; }
test_fn_4: function integer (x: integer, y: string, z: boolean, huh: char) = {
    return 1;
}

/*
function_call_empty_test: integer = test_fn_0();

function_call_one_arg_test: integer = test_fn_1(10-1);

function_call_with_args_test: integer = test_fn_4(test_fn_0(), "test", true, 'c');

arr: array [] integer;
subscript_test: integer = arr[10 * 2];

arr1: array [] integer;
arr2: array [] integer;
arr3: array [] integer;
subscript_nested_test: integer = arr1[arr2[arr3[7]]];

x: integer = 7;
testing: integer = 7;
other: integer = 7;
b: boolean = true;
increment_test: integer = x++ + x++;

decrement_test: integer = x-- - x--;

logical_not_test: boolean = !b;

logical_not_multiple_test: boolean = !!!!!b;

logical_or_test: boolean = b || !b || true;

logical_and_test: boolean = b && false && true;

equal_test: boolean = true == false;

not_equal_test: boolean = "hello" != "test" != true;

gt_test: boolean = x > 7;

gt_equal_test: boolean = 7 > 0;

lt_test: boolean = x < 1;

lt_equal_test: boolean = x <= 10;

assignment_test: integer = x = 6;
*/
